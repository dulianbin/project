<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx.xsd
						http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task-3.0.xsd">
           
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:*.properties">
		</property>
	</bean>
	
	<!-- 启用注解 -->
	<context:annotation-config />
	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven />

	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描，如果不去除会影响事务管理 -->
	<context:component-scan base-package="com.zhaopin.report">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	
	<!-- 配置redis缓存服务开始 -->
	<!-- redis连接池配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="minIdle" value="${redis.pool.minIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${redis.pool.testOnReturn}" />
	</bean>
	<!-- redis连接池jedisPool -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${redis.host}" />
		<constructor-arg index="2" value="${redis.port}" type="int" />
		<constructor-arg index="3" value="${redis.timeout}" type="int" />
		<constructor-arg index="4" value="${redis.password}"/>  
	</bean>
	
	<!-- 配置redis缓存服务结束 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="${jdbc.url.pregcarer}" />
		<property name="username" value="${jdbc.user.pregcarer}" />
		<property name="password" value="${jdbc.password.pregcarer}" />
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="minIdle" value="${dbcp.minIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}" />
		<property name="defaultAutoCommit" value="${dbcp.defaultAutoCommit}" />
		<property name="removeAbandoned" value="${dbcp.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${dbcp.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${dbcp.logAbandoned}" />
		<property name="testOnBorrow" value="${dbcp.testOnBorrow}" />
		<property name="validationQuery" value="${dbcp.validationQuery}" />
		<property name="connectionInitSqls" value="${dbcp.connectionInitSqls}"/>
	</bean>
	
	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml"></property>
		<property name="plugins">
			<ref bean="pagePlugin" />
		</property>
		<!-- mapper配置路径 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/mapper/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"					    
			value="com.zhaopin.report.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 事物管理配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="initRedisData" class="com.zhaopin.report.init.InitRedisData" ></bean>
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<bean id="pagePlugin" class="com.zhaopin.report.plugin.mybatis.PagePlugin">
		<property name="properties">
			<props>
				<!-- 指定数据库分页方言Dialect -->
				<prop key="dialect">com.zhaopin.report.plugin.jdbc.dialet.MySQLDialect
				</prop>
				<prop key="pageSqlId">.*ListPage.*</prop>
			</props>
		</property>
	</bean>
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="find*" propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="get*" propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="findAll*" propagation="NOT_SUPPORTED" read-only="true" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数 ||、or表示或；&&、and表示与-->
	<!-- execution(* com.kingleadsw.tsinghuahelp.business.*.*.service.impl.*.*(..))||execution(* com.kingleadsw.tsinghuahelp.business.*.*.*.service.impl.*.*(..)) -->
	<!-- execution(* com.kingleadsw.tsinghuahelp.business..*.service.impl.*.*(..)) -->
	<aop:config>
		<aop:pointcut expression="execution (* com.zhaopin.report.service.impl.*.*(..))" 
			id="transactionPointcut" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut" />
	</aop:config>
 
	<bean id="springContextHolder" class="com.zhaopin.report.init.SpringContextHolder" />
	<bean id="exceptionHandler" class="com.zhaopin.report.exception.MyExceptionHandler"/>  
	
	
</beans>